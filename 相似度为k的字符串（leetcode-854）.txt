题目（leetcode854）：
如果可以通过将 A 中的两个小写字母精确地交换位置 K 次得到与 B 相等的字符串，我们称字符串?A?和?B?的相似度为 K（K?为非负整数）。

给定两个字母异位词?A?和?B?，返回 A 和 B?的相似度 K 的最小值。

?


示例 1：

输入：A = "ab", B = "ba"

输出：1


示例 2：


输入：A = "abc", B = "bca"

输出：2


示例 3：


输入：A = "abac", B = "baca"

输出：2


示例 4：


输入：A = "aabc", B = "abca"

输出：2
?



提示：


1 <= A.length == B.length <= 20

A?和?B?只包含集合?{'a', 'b', 'c', 'd', 'e', 'f'}?中的小写字母。




解答代码:
class Solution {
public:
    int kSimilarity(string A, string B) {
        queue<string> que;
        set<string> vis;
        vector<string> neighbors;
        int num = 0;
        
        que.push(A);
        vis.insert(A);
        while(!que.empty()){
            for(int i=que.size();i>0;i--){   //广度搜索每一层
                string uStr = que.front();
                que.pop();
                
                if(uStr == B)
                    return num;
                
                neighbors.clear();
                getNeighbors(uStr,B,neighbors);  
                
                for(int j=0;j<neighbors.size();j++){
                    if(vis.find(neighbors[j])!=vis.end())
                        continue;
                    que.push(neighbors[j]);
                    vis.insert(neighbors[j]);
                }
            }
            num++;
        }
        return 0;
    }
    void getNeighbors(const string src,const string target,vector<string>& neighbors){
       //记下第一个不相等的点，所有的交换情况
        int i=0;
        for(;i<src.size();i++){
            if(src[i]!=target[i])
                break;
        }
        for(int j=i+1;j<src.size();j++){
            if(src[j]==target[i]){
                string tmp = src;
                swap(tmp[i],tmp[j]);
                neighbors.push_back(tmp);
            }
        }
    }
    
};